--Given the reviews table, write a query to get the average stars for each product every month.

--The output should include the month in numerical value, product id, and average star rating rounded 
--to two decimal places. Sort the output based on month followed by the product id.

SELECT EXTRACT(MONTH FROM submit_date) AS "month",
       product_id,
       ROUND(AVG(stars), 2) AS avg_score
FROM reviews
GROUP BY month, product_id
ORDER BY month ASC, product_id ASC

--Return:
month	product_id	avg_score
5	    25255	      4.00
5	    25600	      4.33
6	    12580	      4.50
6	    50001	      3.50
6	    69852	      4.00
7	    11223	      5.00
7	    69852	      2.50

--Assume you are given the table containing measurement values obtained from a Google sensor over several days. Measurements are taken several times within a given day.
--Write a query to obtain the sum of the odd-numbered and even-numbered measurements on a particular day, in two different columns. Refer to the Example Output below for the output format.

--Definition:
--1st, 3rd, and 5th measurements taken within a day are considered odd-numbered measurements and the 2nd, 4th, and 6th measurements are even-numbered measurements.

WITH measurement_by_count AS
(SELECT CAST (measurement_time AS date) AS measurement_day,
             measurement_value,
             ROW_NUMBER() OVER(
          PARTITION BY CAST(measurement_time AS date)
          ORDER BY measurement_time
          ) AS measurement_num  
FROM measurements)

SELECT measurement_day,
       SUM(CASE WHEN measurement_num % 2 != 0 
    THEN measurement_value ELSE 0 END) AS odd,
       SUM(CASE WHEN measurement_num % 2 = 0 
    THEN measurement_value ELSE 0 END) AS even
FROM measurement_by_count
GROUP BY measurement_day

--Return:
measurement_day	      odd	      even
07/10/2022 00:00:00	  2355.75	  1662.74
07/11/2022 00:00:00	  2377.12 	2480.70
07/12/2022 00:00:00	  2903.40	  1244.30

--CVS Health is trying to better understand its pharmacy sales, and how well different products are selling. Each drug can only be produced by one manufacturer.
--Write a query to find the top 3 most profitable drugs sold, and how much profit they made. Assume that there are no ties in the profits. 
--Display the result from the highest to the lowest total profit.

--Definition:
--cogs stands for Cost of Goods Sold which is the direct cost associated with producing the drug.
--Total Profit = Total Sales - Cost of Goods Sold

SELECT drug,
       (total_sales - cogs) AS profit
FROM pharmacy_sales
GROUP BY drug, total_sales, cogs
ORDER BY profit DESC
LIMIT 3

--Return:
drug	       profit
Humira	       81515652.55
Keytruda	11622022.02
Dupixent	11217052.34

--Write a query to find out which manufacturer is associated with the drugs that were not profitable and how much money CVS lost on these drugs. 
--Output the manufacturer, number of drugs and total losses. Total losses should be in absolute value. Display the results with the highest losses on top.

SELECT manufacturer,
       COUNT(drug),
       ABS(SUM(total_sales - cogs)) AS net_loss
FROM pharmacy_sales
WHERE total_sales - cogs <= 0
GROUP BY manufacturer
ORDER BY ABS(SUM(total_sales - cogs)) DESC

--Return:
manufacturer	       count	net_loss
Johnson & Johnson	6	894913.13
Eli Lilly	       4	447352.90
Biogen	              3	417018.89
AbbVie	              2	413991.10
Roche	              2	159741.62
Bayer	              1	28785.28

--Assume you are given the tables below containing information on Snapchat users, their ages, and their time spent sending and opening snaps. 
--Write a query to obtain a breakdown of the time spent sending vs. opening snaps (as a percentage of total time spent on these activities) for each age group.
--Output the age bucket and percentage of sending and opening snaps. Round the percentage to 2 decimal places.

WITH snaps_statistics 
AS ( 
  SELECT 
    age.age_bucket, 
    SUM(CASE WHEN activities.activity_type = 'send' 
      THEN activities.time_spent ELSE 0 END) AS send_timespent, 
    SUM(CASE WHEN activities.activity_type = 'open' 
      THEN activities.time_spent ELSE 0 END) AS open_timespent, 
    SUM(activities.time_spent) AS total_timespent 
  FROM activities
  JOIN age_breakdown AS age 
    ON activities.user_id = age.user_id 
  WHERE activities.activity_type IN ('send', 'open') 
  GROUP BY age.age_bucket
) 

SELECT 
  age_bucket, 
  ROUND((100*(send_timespent / total_timespent)), 2) AS send_perc, 
  ROUND((100*(open_timespent / total_timespent)), 2) AS open_perc 
FROM snaps_statistics;

--Return:
age_bucket	send_perc	open_perc
21-25	       54.31	       45.69
26-30	       82.26	       17.74
31-35	       37.84	       62.16

